java
import java.util.HashMap;
import java.util.Map;
import java.util.Scanner;

public class SecureMessagingApp {
    
    private static Map<String, String> phoneNumbers = new HashMap<>();
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        // Register phone numbers and their encryption keys
        phoneNumbers.put("1234567890", "key123");
        phoneNumbers.put("9876543210", "key456");
        
        System.out.println("Welcome to Secure Messaging App!");
        
        while (true) {
            System.out.println("\n1. Send Encrypted Message");
            System.out.println("2. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();
            
            switch (choice) {
                case 1:
                    sendMessage();
                    break;
                case 2:
                    System.out.println("Exiting Secure Messaging App. Goodbye!");
                    System.exit(0);
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
    }
    
    private static void sendMessage() {
        Scanner scanner = new Scanner(System.in);
        
        System.out.print("Enter recipient's phone number: ");
        String phoneNumber = scanner.next();
        
        if (!phoneNumbers.containsKey(phoneNumber)) {
            System.out.println("Recipient's phone number not found. Please try again.");
            return;
        }
        
        System.out.print("Enter message to send: ");
        String message = scanner.next();
        
        String encryptionKey = phoneNumbers.get(phoneNumber);
        String encryptedMessage = encryptMessage(message, encryptionKey);
        
        System.out.println("Message sent successfully!");
        System.out.println("Encrypted Message: " + encryptedMessage);
    }
    
    private static String encryptMessage(String message, String encryptionKey) {
        // Simple encryption algorithm using XOR operation
        StringBuilder encryptedMessage = new StringBuilder();
        
        for (int i = 0; i < message.length(); i++) {
            char encryptedChar = (char) (message.charAt(i) ^ encryptionKey.charAt(i % encryptionKey.length()));
            encryptedMessage.append(encryptedChar);
        }
        
        return encryptedMessage.toString();
    }
}